<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>More than seven</title>
    <link>/index.xml</link>
    <description>Recent content on More than seven</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Wed, 23 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The coming of the Kubernetes distributions</title>
      <link>/2016/11/23/the-coming-of-the-kubernetes-distributions/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/23/the-coming-of-the-kubernetes-distributions/</guid>
      <description>

&lt;p&gt;Very few people today start using Linux by downloading the linux kernel
and starting from scratch. Most people start with a Linux distribution;
for instance Debian, Ubuntu or CentOS. These distributions provide some
opinions, some central infrastructure, a brand, strong versioning for
the entire ecosystem and a bunch of other things. I posit that we&amp;rsquo;ll see
the same pattern emerge with Kubernetes.&lt;/p&gt;

&lt;h2 id=&#34;what-even-is-kubernetes&#34;&gt;What even is Kubernetes?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen Kubernetes described as all of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An operating system for your datacenter&lt;/li&gt;
&lt;li&gt;The distributed systems toolkit&lt;/li&gt;
&lt;li&gt;The Linux kernel for distributed systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think all of these descriptions point to the developers intent that
Kubernetes is something to build upon, rather than a simple out-of-the-box
experience. It&amp;rsquo;s predominantly about building agreement on the
primitives/APIs of distributed systems.&lt;/p&gt;

&lt;h2 id=&#34;a-name-for-a-thing&#34;&gt;A name for a thing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve not seen much discussion of this in general yet, I think because
it&amp;rsquo;s early days and many of the people looking at Kubernetes today are
either developers or early adopter types. These people have been
&amp;ldquo;downloading the kernel and starting from scratch&amp;rdquo;, even until recently
most likely running from source downloaded directly from GitHub. If the
Kubernetes ecosystem is to grow then that&amp;rsquo;s not how more mainstream IT
will adopt Kubernetes.&lt;/p&gt;

&lt;p&gt;The reason for discussing this now is that I think a name is useful.
That way we can talk about Kubernetes (singular, the software) separate
from distrubutions of Kubernetes (many of them, from different vendors
and communities). I&amp;rsquo;d be happy to see a different name, but I think
distribution probably fits best.&lt;/p&gt;

&lt;h2 id=&#34;any-evidence&#34;&gt;Any evidence?&lt;/h2&gt;

&lt;p&gt;Absolutely. A range of software vendors are providing what I&amp;rsquo;m calling
Kubernetes distributions. Here is a sample, I&amp;rsquo;m sure there are and will
be more. I&amp;rsquo;m also sure over time some will disappear or maintain only a
niche audience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenShift from Red Hat&lt;/li&gt;
&lt;li&gt;Tectonic from CoreOS&lt;/li&gt;
&lt;li&gt;Kismatic from Apprenda&lt;/li&gt;
&lt;li&gt;Rancher&lt;/li&gt;
&lt;li&gt;Canonical Distribution of Kubernetes&lt;/li&gt;
&lt;li&gt;GKE from Google&lt;/li&gt;
&lt;li&gt;Azure Container Service from Microsoft&lt;/li&gt;
&lt;li&gt;Photon Platform from VMware&lt;/li&gt;
&lt;li&gt;Navops from Univa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that Canonical are already using the term &lt;em&gt;distribution&lt;/em&gt; in the
name. I&amp;rsquo;ve seen it used in passing in CoreOS, OpenShift and Apprenda
press materials too.&lt;/p&gt;

&lt;h2 id=&#34;what-can-we-expect-from-kubernetes-distributions&#34;&gt;What can we expect from Kubernetes distributions?&lt;/h2&gt;

&lt;p&gt;Running with the analogy that Kubernetes is &amp;ldquo;an operating system for
your datacenter&amp;rdquo; and that we&amp;rsquo;ll have a range of competing Kubernetes
distributions, what else can we expect over the next few years?&lt;/p&gt;

&lt;h3 id=&#34;package-repositories-aka-app-stores&#34;&gt;Package repositories (aka. app stores)&lt;/h3&gt;

&lt;p&gt;One of the things provided by the traditional Linux distributions has
been a central package repository. Most of the packages you&amp;rsquo;re
installing from &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;yum&lt;/code&gt; are coming from that currated set of
available packages. Not to mention community efforts like EPEL. We
already have two package concepts within the Kubernetes ecosystem -
container images (often from Docker Hub today, or from internal
repositories) and Charts, part of the Helm package management tool
(now a CNCF project).&lt;/p&gt;

&lt;p&gt;In the short term expect the shared public Charts repository and Docker
Hub to dominate. But over time different vendors will launch there own
repositories. Partly this will be about building a trusted ecosystem,
partly about limiting permutations for support and testing, and partly
about control. The prize here is to be &amp;ldquo;the enterprise app store&amp;rdquo; and
no vendor in this space isn&amp;rsquo;t going to at least try to own that as part
of their platform.&lt;/p&gt;

&lt;h3 id=&#34;kubernetes-standards-and-compliance&#34;&gt;Kubernetes standards and compliance&lt;/h3&gt;

&lt;p&gt;In an environment with many distributors of core software, it&amp;rsquo;s
common for people to emphasise portability. As vendors extend their
distribution (to provide higher level, but potentially proprietary
features) this can become muddier. Some level of certification is
often the answer. See CloudFoundry or OpenStack for recent examples.
Kubernetes is already part of the CNCF, part of the Linux Foundation.
I&amp;rsquo;d expect to see the works standards and certification eventually
float around, but my guess is not in the short term.&lt;/p&gt;

&lt;h3 id=&#34;a-fight-over-who-is-the-most-open&#34;&gt;A fight over who is the most open&lt;/h3&gt;

&lt;p&gt;Much of the container conversation recently has centered around a
&lt;em&gt;weaponisation&lt;/em&gt; of &lt;em&gt;open&lt;/em&gt;. I think as the different distributions try and
take the community with them at the same time as trying to scale sales this
will continue. This will be an irritation and is probably best avoided.&lt;/p&gt;

&lt;h3 id=&#34;pressure-for-aws-to-offer-kubernetes-as-a-service&#34;&gt;Pressure for AWS to offer Kubernetes as a service&lt;/h3&gt;

&lt;p&gt;I would presume AWS has a very good idea of how many people are actually
using Kubernetes on it&amp;rsquo;s platform. I think as that grows, and as other
vendors efforts mature, they will come under pressure to offer the
Kubernetes API as a service. I&amp;rsquo;m still split on whether that will
actually happen but that&amp;rsquo;s a longer blog post about economics.&lt;/p&gt;

&lt;h3 id=&#34;differentiating-features&#34;&gt;Differentiating features&lt;/h3&gt;

&lt;p&gt;Ultimately vendors will try and differentiate themselves in this new
market. To begin with the majority of business will be targetting the
container-curious and mainly talking up the benefits of containers and
Kubernetes. But some potentialy customers are going to insist on
comparing Kubernetes distributions and winning there is going to be about
clear differentiation. Do you want to be the budget offering or the
provider with the unique selling point?&lt;/p&gt;

&lt;h2 id=&#34;interesting-questions&#34;&gt;Interesting questions&lt;/h2&gt;

&lt;p&gt;An observation at the moment is that all the current Kubernetes
distributions I&amp;rsquo;m aware of are vendor-owned. Whether Open Source or not,
they are driven by a single vendor (CoreOS, Red Hat, Apprenda, etc.)
It&amp;rsquo;s interesting to see whether, in the current climate, we see a
genuinely free and open source Kubernetes distribution emerge, similar
to the role Debian plays in the Linux distribution world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unikernels and The End of the General Purpose Operating System</title>
      <link>/2016/11/12/the-end-of-the-general-purpose-operating-system-unikernels/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/12/the-end-of-the-general-purpose-operating-system-unikernels/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;http://www.morethanseven.net/2016/11/05/the-end-of-the-general-purpose-operating-system-as-it-happens/&#34;&gt;previous
post&lt;/a&gt;
went into why I think the days of the general purpose operating system
(for servers) are numbered. But one interesting area I didn&amp;rsquo;t comment
on (but did talk about in the talk of the same name) was Unikernels.&lt;/p&gt;

&lt;h2 id=&#34;it-s-all-about-cost&#34;&gt;It&amp;rsquo;s all about cost&lt;/h2&gt;

&lt;p&gt;One of the topics I didn&amp;rsquo;t really touch on in discussing the end of the
generally purpose operating system was cost. Historically,
maintaining a general purpose operating system has been a costly
endeavour, something only the largest companies or communities could
sustain by themselves. Think Red Hat, Oracle, Microsoft, Sun, IBM,
Debian, etc. The result of that is the assumption when building software
that you should target one or more of a small number of operating systems.
In doing so you&amp;rsquo;re ceding some ground, and likely some revenue, to another
vendor. You&amp;rsquo;re also stuck with any underlying limitations of that OS as
well as its release cadence. And invariably you&amp;rsquo;re also stuck with the
multiplying support cost of supporting your software on multiple versions of
that OS over time.&lt;/p&gt;

&lt;p&gt;I would posit that up until relatively recently the cost of that support
burden was hugely outweighted by the cost of maintaining an actual operating
system. But that&amp;rsquo;s now changing, as I outlined in the previous post. Now a
small or medium sized software company (be it CoreOS, Rancher, Docker,
Pivotal, etc.) can build and maintain it&amp;rsquo;s own operating system as well.
This is very much about the rising level of abstraction - all of the
above leverage the huge efforts that go into the Linux kernel and into
other projects like systemd (CoreOS) or Alpine (Docker&amp;rsquo;s Moby) for
instance.&lt;/p&gt;

&lt;h2 id=&#34;enter-unikernels&#34;&gt;Enter Unikernels&lt;/h2&gt;

&lt;p&gt;But where do Unikernels fit into this narrative? I&amp;rsquo;d argue that they
represent the fulfilment of this democratization. If building and
maintaining a traditional OS is only possible for the largest of
companies, and building and maintaining a more special-purpose OS (say
for running containers, or a storage device) is cost-effective for medium
sized softare companies, then Unikernels will allow anyone to build their
own single-purpose operating systems.&lt;/p&gt;

&lt;p&gt;There are other technical reasons for (and against) Unikernels as an
approach but most focus on the technical. I think the economic side is
worth some consideration too. And not just the typical development and
support costs, but the ability to own the end-to-end unit of software
has lots of benefits, and Unikernels may make those benefits available
to everyone, including small organisations and individuals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The End of the General Purpose Operating System</title>
      <link>/2016/11/05/the-end-of-the-general-purpose-operating-system-as-it-happens/</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/05/the-end-of-the-general-purpose-operating-system-as-it-happens/</guid>
      <description>

&lt;p&gt;As interesting chat on Twitter today reminded me that not everyone is
probably aware that we&amp;rsquo;re seeing a concerted attempt to dislodge the
general purpose operating system from our servers.&lt;/p&gt;

&lt;p&gt;I gave a talk about some of this &lt;a href=&#34;https://speakerdeck.com/garethr/the-end-of-the-general-purpose-operating-system&#34;&gt;nearly two years
ago&lt;/a&gt;
and I though a blog post looking at what I got right, what I got wrong
and what&amp;rsquo;s actually happening would be of interest to folks. The talk
was written only a few months after I joined Puppet. With a bunch
more time working for a software vendor there are some bits I missed in
my original discussion.&lt;/p&gt;

&lt;h2 id=&#34;what-do-you-mean-by-general-purpose-and-by-end&#34;&gt;What do you mean by general purpose and by end?&lt;/h2&gt;

&lt;p&gt;First up, a bit of clarification. By &lt;em&gt;general purpose OS&lt;/em&gt; I&amp;rsquo;m referring
to what most people use for server workloads today - be it RHEL or variants
like CentOS or Fedora, or Debian and derivatives like Ubuntu. We&amp;rsquo;ll
include Arch, the various BSD and opensolaris flavours and Windows too.
By &lt;em&gt;end&lt;/em&gt; I don&amp;rsquo;t literally mean they go away or stop being useful. My
hypothosis is that, slowly to begin with then more quickly, they cease
to be the default we reach for when launching new services.&lt;/p&gt;

&lt;h2 id=&#34;the-hypervisor-of-containers&#34;&gt;The hypervisor of containers&lt;/h2&gt;

&lt;p&gt;The first part of the talk included a discussion of what I&amp;rsquo;d referred to
as &lt;em&gt;the hypervisor of containers&lt;/em&gt;, what today would more likely be
referred to as a CaaS, or containers as a service. I even speculated
that VMWare would have to ship something in this space (See vSphere Integrated
Containers and the work on Photon OS) and that counting out OpenShift
would be premature (OpenShift 3 shipped predominantly as a Kubernetes
distribution). I&amp;rsquo;ll come back to why this is a threat to your beloved
Debian servers shortly.&lt;/p&gt;

&lt;h2 id=&#34;the-race-to-pid1&#34;&gt;The race to PID1&lt;/h2&gt;

&lt;p&gt;For anyone who has run Docker you&amp;rsquo;ll likely have wrestled with the
question of where does the role of the host process supervisor (probably systemd)
start and the container process supervisor (the Docker engine) end? Do
you have to interact directly with both of them?&lt;/p&gt;

&lt;p&gt;Now imagine if &lt;em&gt;all&lt;/em&gt; of the software on your servers was run in containers.
Why do I need two process supervisors now with 100% overlap? The obvious
answer is you don&amp;rsquo;t, which is why the fight between Docker and systemd
is inevitable. Note that this isn&amp;rsquo;t specific to Docker either. In-scope
for &lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o&#34;&gt;cri-o&lt;/a&gt; is &lt;em&gt;Container
process lifecycle management&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;containers-as-the-unit-of-software&#34;&gt;Containers as the unit of software&lt;/h2&gt;

&lt;p&gt;Hidden behind my hypothosis, which mainly went unsaid, was
that containers are becoming the unit of software. By which I mean
the software we build or buy will increasingly be distributed as
containers and run as containers. The container will carry with it
enough metadata for the runtime to determine what resources are
required to run it.&lt;/p&gt;

&lt;p&gt;The number of simplying assumption that come from this shared contract should not
be underestimated. At least at the host level you&amp;rsquo;re likely to need lots
of near-identical hosts, all simply advertising their capabilities to
the container scheduler.&lt;/p&gt;

&lt;h2 id=&#34;operating-system-as-implementation-detail&#34;&gt;Operating system as implementation detail&lt;/h2&gt;

&lt;p&gt;What we&amp;rsquo;re witnessing in the market is the development of vertically integrated
stacks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker for Mac/Windows/AWS/Azure ships with it&amp;rsquo;s own operating
system, an Alpine Linux derivative &lt;a href=&#34;http://lucjuggery.com/blog/?p=753&#34;&gt;nicknamed Moby&lt;/a&gt;, which is not intended for direct management by end users.&lt;/li&gt;
&lt;li&gt;Tectonic from CoreOS is a Kubernetes distribution which runs atop a
cluster of managed CoreOS hosts. Most of the operating system is
managed with frequent atomic rolling updates.&lt;/li&gt;
&lt;li&gt;OpenShift Enterprise from RedHat is another Kubernetes derivative,
this time running atop Atomic host.&lt;/li&gt;
&lt;li&gt;Pivotal CloudFoundry &lt;a href=&#34;https://twitter.com/jambay/status/794904634502496257&#34;&gt;ships with the IaaS, host OS, kernel, file
system, container OS all tested
together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of these cases the operating system is an implementation detail
of the higher level software. It&amp;rsquo;s not intended to be directly managed,
or at least managed to the same degree as the general purpose OS you&amp;rsquo;re
running today.&lt;/p&gt;

&lt;p&gt;This is how the end comes for the majority of your general purpose
operating system running servers. The machines running containers will
be running something more single purpose, and more and more of the
software you&amp;rsquo;re running will be running in containers.&lt;/p&gt;

&lt;p&gt;The reason why you&amp;rsquo;ll do this, rather than compose everything yourself, is
compatability. Whether it&amp;rsquo;s kernel versions, file system drivers,
operating system variants or a hundred variations that make your OS
build different from mine. Building and testing software that runs
everywhere is a sisyphean task. Their is also the commercial angle at
play here, and the advantage of being able to support a single validated
product to everyone.&lt;/p&gt;

&lt;h2 id=&#34;implications&#34;&gt;Implications&lt;/h2&gt;

&lt;p&gt;There are lots of implications to this move, and it&amp;rsquo;s going to be
interesting to see how it plays out with both early adopters and
enterprise customers alike.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What does this mean for corporate operating system policies?&lt;/li&gt;
&lt;li&gt;How do standard agent-based monitoring systems work in a world of
closed vertical stacks?&lt;/li&gt;
&lt;li&gt;Will we see this pattern for other types of service in the AWS Marketplace,
where instance launched are inaccessible but automatically updating?&lt;/li&gt;
&lt;li&gt;How does such fast moving software work in environments with rigid
change control processes or audit requirements?&lt;/li&gt;
&lt;li&gt;Many large organisations will end up running more than one of these
types of system, how best to manage such heterogenous environments?&lt;/li&gt;
&lt;li&gt;Will we see push back from some parties? In particular the open source
community who may see this mainly serving the needs of vendors?&lt;/li&gt;
&lt;li&gt;Does the end of the general purpose OS lead to greater specialism
amongst systems administrators?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;d love to chat about any of this with other folks who have given it
some thought. It&amp;rsquo;s interesting watching grand changes play out across
the industry and picking up on patterns that are likely obvious in
hindsight. And if you like this sort of thing let me know and I&amp;rsquo;ll try
and find time for more speculation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>InfraKit Hello World</title>
      <link>/2016/10/07/infrakit-hello-world/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/10/07/infrakit-hello-world/</guid>
      <description>&lt;p&gt;Docker just shipped &lt;a href=&#34;https://github.com/docker/infrakit&#34;&gt;InfraKit&lt;/a&gt; a few days ago at LinuxCon and, while at the Docker Distributed Systems Summit, I wanted to see if I could get a hello world example up and running. The documentation is lacking at the moment, epecially around how to tie the different components like instances and flavors together.&lt;/p&gt;

&lt;p&gt;The following example isn&amp;rsquo;t going to do anything particularly useful, but it&amp;rsquo;s hopefully simple enough to help anyone else trying to get started. I&amp;rsquo;m assuming you&amp;rsquo;ve checked out and built the binaries as described in the &lt;a href=&#34;https://github.com/docker/infrakit#building&#34;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First create a directory. We&amp;rsquo;re going to be using InfraKit to manage local files in that directory as part of the demo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create an InfraKit configuration file. We&amp;rsquo;re going to use the &lt;code&gt;file&lt;/code&gt; instance plugin to manage files in out directory. This means everything works on the local machine, rather than trying to launch real infrastructure in AWS or similar. InfraKit also requires a &lt;code&gt;flavor&lt;/code&gt; plugin. I&amp;rsquo;m using &lt;code&gt;vanilla&lt;/code&gt; here just to meet the requirement for a flavor plugin, but it&amp;rsquo;s not going to actually do anything in this demo. It might be useful to write a noop flavor plugin or similar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat garethr.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;garethr&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Properties&amp;quot;&lt;/span&gt;: {
        &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Instance&amp;quot;&lt;/span&gt; : {
            &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Plugin&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;instance-file&amp;quot;&lt;/span&gt;,
            &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Properties&amp;quot;&lt;/span&gt;: {
            }
        },
        &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Flavor&amp;quot;&lt;/span&gt; : {
            &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Plugin&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;flavor-vanilla&amp;quot;&lt;/span&gt;,
            &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Properties&amp;quot;&lt;/span&gt;: {
                &lt;span style=&#34;color: #bb0066; font-weight: bold&#34;&gt;&amp;quot;Size&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;1&lt;/span&gt;
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;InfraKit is based on running separate plugins. Each plugin runs as a separate process and provides a filesystem socket in /run/infrakit/plugins. First start up the file plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./infrakit/file --dir=./test
INFO[0000] Starting plugin
INFO[0000] Listening on: unix:///run/infrakit/plugins/instance-file.sock
INFO[0000] listener protocol= unix addr= /run/infrakit/plugins/instance-file.sock err= &amp;lt;nil&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, in a separate terminal run the vanilla plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./infrakit/vanilla
INFO[0000] Starting plugin
INFO[0000] Listening on: unix:///run/infrakit/plugins/flavor-vanilla.sock
INFO[0000] listener protocol= unix addr= /run/infrakit/plugins/flavor-vanilla.sock err= &amp;lt;nil&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An finally run the group plugin. I&amp;rsquo;m passing &lt;code&gt;--log=5&lt;/code&gt; to enable more verbose outout so it&amp;rsquo;s easier to see what&amp;rsquo;s going on with the group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./infrakit/group --log=5
INFO[0000] Starting discovery
DEBU[0000] Opening: /run/infrakit/plugins
DEBU[0000] Discovered plugin at unix:///run/infrakit/plugins/instance-file.sock
INFO[0000] Starting plugin
INFO[0000] Starting
INFO[0000] Listening on: unix:///run/infrakit/plugins/group.sock
INFO[0000] listener protocol= unix addr= /run/infrakit/plugins/group.sock err= &amp;lt;nil&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that all setup we can create a group based on our configuration file from above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./infrakit/cli group --name group watch garethr.json
watching garethr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Have a look in the test directory. You should see a single file has been created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls test
instance-1475833380
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s delete that file and see what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm test/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully InfraKit will spot the instance (a file in this case) no longer exists and recreate it. You should see something like the following in the logs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0612] Created instance instance-1475833820 with tags map[infrakit.config_sha:B2MsacXz8V_ztsjAzu3tu3zivlw= infrakit.group:garethr]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is obviously a less-than-useful example but hopefully provides a good hello world example for anyone trying to run InfraKit in it&amp;rsquo;s current early stage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Everyone is Not a Software Company</title>
      <link>/2016/07/05/everyone-is-not-a-software-company/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/07/05/everyone-is-not-a-software-company/</guid>
      <description>

&lt;p&gt;The &lt;em&gt;Everyone is a Software Company&lt;/em&gt; meme has been around for a
&lt;a href=&#34;http://www.forbes.com/sites/techonomy/2011/11/30/now-every-company-is-a-software-company/#22c372311009&#34;&gt;number&lt;/a&gt;
&lt;a href=&#34;http://www.zdnet.com/article/now-that-everyone-is-a-software-company-should-they-operate-like-software-companies/&#34;&gt;of&lt;/a&gt;
&lt;a href=&#34;http://blogs.gartner.com/peter-sondergaard/everyone-is-a-technology-company/&#34;&gt;years&lt;/a&gt;,
but it feels increasingly hard to get away from recently. That prompted
this post.&lt;/p&gt;

&lt;h2 id=&#34;but-what-do-we-mean-by-software-company&#34;&gt;But what do we mean by Software Company?&lt;/h2&gt;

&lt;p&gt;To be software company you&amp;rsquo;re going to need to employee software
engineers and other professionals. Applying that logic to a large
number of companies at once, and looking at how existing
&lt;em&gt;software companies&lt;/em&gt; are setup, we find a few large problems.&lt;/p&gt;

&lt;h2 id=&#34;google-as-an-example&#34;&gt;Google as an example&lt;/h2&gt;

&lt;p&gt;In my talk at Velocity, entitled &lt;a href=&#34;https://speakerdeck.com/garethr/the-two-sides-to-google-infrastructure-for-everyone-else&#34;&gt;The Two Sides of Google Infrastructure
for Everyone
Else&lt;/a&gt;
I argued both for and against the idea of wholesale adoption of
Google-like software and development/operations practices.
Even though they derive the lions share of revenue from advertising it&amp;rsquo;s
easy to argue that Google are a software company. But what does that look like?
What makes Google a software company?&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://abc.xyz/investor/pdf/20151231_alphabet_10K.pdf&#34;&gt;Google Annual Report
2015&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;61,814 full-time employees: 23,336 in research and development,
19,082 in sales and marketing, 10,944 in operations, and 8,452
in general and administrative functions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, roughly 50% of Google is involved in building or running software.
&lt;a href=&#34;https://www.glassdoor.com/Salary/Google-Salaries-E9079.htm&#34;&gt;Glassdoor&lt;/a&gt;
says salaries for engineers at Google average about $126,000-$162,000.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm&#34;&gt;US Bureau of Labor Statistics says&lt;/a&gt;
that in 2014 the number of computer programming jobs in the US
was 1,114,000, with median pay in 2015 of $100,690 a year. The
total number of jobs in the US is about 143 million, with the
average wages at $44,569.20 according to the &lt;a href=&#34;https://www.ssa.gov/oact/cola/awidevelop.html&#34;&gt;Social Security
Administration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Google Annual Report also states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Competition for qualified personnel in our industry is intense,
particularly for software engineers, computer
scientists, and other technical staff&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, quick summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software engineers are expensive relative to others employees&lt;/li&gt;
&lt;li&gt;Demand for the best engineers means even higher wages&lt;/li&gt;
&lt;li&gt;Proportionally there aren&amp;rsquo;t many software developers&lt;/li&gt;
&lt;li&gt;There isn&amp;rsquo;t a large surplus of unemployed software engineers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the data above is mainly from US sources, although the Google data
is from an international company with offices around the world. My
experience says this is likely similar in Europe. Looking into data for
India and China would be super interesting I&amp;rsquo;d wager.&lt;/p&gt;

&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;

&lt;p&gt;One obvious problem is short-term supply and demand. Everyone wants
experienced software folks for their transformation effort. But the more
organisations that buy into the &lt;em&gt;everyone is a software company&lt;/em&gt; story
the greater the demand for a finite supply of people. For most
that means you&amp;rsquo;ll to able to find less people that you want because of
competition and afford even less people because all that competition
pushes up salaries.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen that firsthand while working for the UK Government. People
occasionally complained that Government was hampering commercial
organisations growth by employing lots of developers and operations
people in London.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re also immediately in competition for software professionals with
existing software companies. Given the high salaries, most of
those employers already have developer friendly working environments and
established hiring practices suited to luring developers to work for
them. This sort of special case is hard for large companies without an
existing empowered developer organisation. I saw a lot of that at the
Government as well.&lt;/p&gt;

&lt;p&gt;But the real macro problems are much more interesting. Even if you think
50% is a high mark for the ratio of software folk to others, you probably
agree you need a lot more than you have today. And those developers just
don&amp;rsquo;t exist today to allow &lt;em&gt;everyone to be a software company&lt;/em&gt;. Nor
would I argue is education in the near term producing enough skilled
people to fill that gap tomorrow. So, what happens?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does everyone sort-of become a software company but not quite?&lt;/li&gt;
&lt;li&gt;Do most organisations struggle to hire and maintain a software team
and see the endeavour fail?&lt;/li&gt;
&lt;li&gt;Do increasing numbers of developers end up working for a small number
of larger and larger software companies?&lt;/li&gt;
&lt;li&gt;Does outsourcing bounceback,  adapt and demonstrate innovation and
transformation qualities to go along with the scale?&lt;/li&gt;
&lt;li&gt;Countries like India or China are able to produce enough software engineers
at scale to allow there companies to act on everyone becoming a
software company?&lt;/li&gt;
&lt;li&gt;We see clear winners and losers, ie. companies which become software
companies and accelarate away from those that don&amp;rsquo;t?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally I think to take advantage of the idea behind the meme we&amp;rsquo;re
going to need order of magnitude more efficient approaches to software
delivery. What that looks like is the most interesting question of all.&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;The above is not a detailed analysis, and undoutedly has a few holes. It
also doesn&amp;rsquo;t overly question the &lt;em&gt;advantage&lt;/em&gt; of being a software
company, or really question what we actually mean by &lt;em&gt;everyone&lt;/em&gt;. But I
think the central point holds: Everyone is NOT a software company, nor
will everyone be a software company any time soon, unless we come up
with a fundamentally better approach to service delivery.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Operations is more than just Systems Administration</title>
      <link>/2015/12/27/operations-more-than-systems-administration/</link>
      <pubDate>Sun, 27 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/12/27/operations-more-than-systems-administration/</guid>
      <description>

&lt;p&gt;I think one of the patterns of the last few years has been the
democratization of systems administration, especially for web
applications. Whether that&amp;rsquo;s Heroku or Docker, or Chef or Puppet, more
and more traditional developers are doing work that would have been
&lt;em&gt;somebody else&amp;rsquo;s problem&lt;/em&gt; only a few years ago. But running in parallel
to that thread is another less positive trend, that of conflating
operations with &lt;em&gt;just&lt;/em&gt; systems administation. The story seems to go that
now we know Ansible (or some other tool) we just need developers to run
the show.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to try and introduce some of the other
operational disciplines, especially for developers who maybe have come
to operations via the above resurgence in infrastructure tooling over
the past few years.&lt;/p&gt;

&lt;p&gt;Note that this post has a slight bias towards more &lt;em&gt;normal&lt;/em&gt;
organisations. That is to say if you&amp;rsquo;re in a 5 person software startup
you probably don&amp;rsquo;t have operational problems to worry too much about
yet. I&amp;rsquo;m also not playing down the practice of systems administration,
most experienced sysadmins I know are also quite rounded operations pros
as well.&lt;/p&gt;

&lt;h2 id=&#34;service-management&#34;&gt;Service Management&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve worked in operations, or in many large organisations you&amp;rsquo;ll have
come across the term Service Management. This tends to be linked to
various service management frameworks; like ITIL or MOF (Microsoft
Operations Framework). The framework will describe, often in great
detail, activities and processes for things like incident response,
configuration management, change management, capacity planning and more.&lt;/p&gt;

&lt;p&gt;While I was at &lt;a href=&#34;https://gds.blog.gov.uk/&#34;&gt;The Government&lt;/a&gt; I wrote what I
think is a reasonable introduction to &lt;a href=&#34;https://www.gov.uk/service-manual/operations/service-management.html&#34;&gt;Service
Management&lt;/a&gt;
albeit from a specific point-of-view. This was based on my experience of
trying, and likely sometimes failing, to encourage teams to think about
how the products they we&amp;rsquo;re working on would be run. Each of the topics
touched on in the overview is worthy of it&amp;rsquo;s own stack of books, but I
will repeat the ITIL service list here as (whatever you might think of
the framework or a specific implementation) I&amp;rsquo;d found it a useful starting
point for conversations - in particular stressing the breadth of
topics under service management.&lt;/p&gt;

&lt;h4 id=&#34;service-strategy&#34;&gt;Service Strategy&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;IT service management&lt;/li&gt;
&lt;li&gt;Service portfolio management&lt;/li&gt;
&lt;li&gt;Financial management for IT services&lt;/li&gt;
&lt;li&gt;Demand management&lt;/li&gt;
&lt;li&gt;Business relationship management&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;service-design&#34;&gt;Service Design&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Design coordination&lt;/li&gt;
&lt;li&gt;Service Catalogue management&lt;/li&gt;
&lt;li&gt;Service level management&lt;/li&gt;
&lt;li&gt;Availability management&lt;/li&gt;
&lt;li&gt;Capacity Management&lt;/li&gt;
&lt;li&gt;IT service continuity management&lt;/li&gt;
&lt;li&gt;Information security management system&lt;/li&gt;
&lt;li&gt;Supplier management&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;service-transition&#34;&gt;Service Transition&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Transition planning and support&lt;/li&gt;
&lt;li&gt;Change management&lt;/li&gt;
&lt;li&gt;Service asset and configuration management&lt;/li&gt;
&lt;li&gt;Release and deployment management&lt;/li&gt;
&lt;li&gt;Service validation and testing&lt;/li&gt;
&lt;li&gt;Change evaluation&lt;/li&gt;
&lt;li&gt;Knowledge management&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;service-operation&#34;&gt;Service Operation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Event management&lt;/li&gt;
&lt;li&gt;Incident management&lt;/li&gt;
&lt;li&gt;Request fulfillment&lt;/li&gt;
&lt;li&gt;Problem management&lt;/li&gt;
&lt;li&gt;Identity management&lt;/li&gt;
&lt;li&gt;Continual Service Improvement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each of the above points, whether you are using ITIL or not, it&amp;rsquo;s
useful to have a conversation. Some of these areas do provide ample
opportunity for automation and for using tooling to minimise the effort
required. But much of this is about designing &lt;em&gt;how&lt;/em&gt; you are going to
operate a service throughout it&amp;rsquo;s lifetime.&lt;/p&gt;

&lt;h2 id=&#34;operations-user-stories&#34;&gt;Operations user stories&lt;/h2&gt;

&lt;p&gt;One of the other things I published while at The Government was a set of
&lt;a href=&#34;https://www.gov.uk/service-manual/operations/web-operations-stories.html&#34;&gt;user stories for a web operations
team&lt;/a&gt;.
These grew out of work on launching GOV.UK and have had input from
various past colleagues. In hindsight I&amp;rsquo;d probably do somethings
here differently, the stories assume a certain context which isn&amp;rsquo;t explicitly
spelled out for instance. But they have a couple of things going for them in that
they demonstrate how traditional operations activities can be planned out as part
of a more developer-friendly planning approach, and also they are public and
have been tested by more than a single team.&lt;/p&gt;

&lt;h2 id=&#34;not-everything-is-a-programming-problem&#34;&gt;Not everything is a programming problem&lt;/h2&gt;

&lt;p&gt;The main point I think is that not everything can be turned into a
programming problem to solve. Automation has it&amp;rsquo;s place, and many manual
processes and practices can benefit from automation. But the wide range
of activities involved in running a non-trivial and often non-ideal
system in production tend to mean making trade-offs and prioritization
decisions frequently. This is where softer skills like arguing for
funding or additional head count, or building a business case for
further work, come into play. Operations management is much more than
systems administration.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;This is little more than a plea for people to think more about
operations, separate to the more technical aspects of systems
administration. If you&amp;rsquo;re interested in learning more however I would
recommend some good reading material:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itpi.org/the-visible-ops-handbook-review.html&#34;&gt;Visible Ops
Handbook&lt;/a&gt; -
still an excellent and pragmatic introduction to many of the topics
noted above.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920033080.do&#34;&gt;Designig Delivery&lt;/a&gt; -
a bang up-to-date tome covering a range of service design topics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.basicsm.com/bsm-basic-service-management-book&#34;&gt;Basic Service
Management&lt;/a&gt; -
a 50 page starter book covering the fundamentals of service
management as generally discussed in more detail elsewhere. A great
starting point.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Provisioning droplets with Puppet</title>
      <link>/2015/12/04/provisioning-droplets-with-puppet/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/12/04/provisioning-droplets-with-puppet/</guid>
      <description>

&lt;p&gt;I love &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; for quickly spinning
up machines. I also like managing my infrastructure using Puppet. Enter the
&lt;a href=&#34;https://forge.puppetlabs.com/garethr/digitalocean&#34;&gt;garethr-digitalocean&lt;/a&gt; module.
This currently provides a single Puppet type; &lt;code&gt;droplet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets show a quick example of that, by launching two droplets, called
test-digitalocean and test-digitalocean-1.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;droplet&lt;/span&gt; { [&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test-digitalocean&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;test-digitalocean-1&amp;#39;&lt;/span&gt;]:
  &lt;span style=&#34;color: #336699&#34;&gt;ensure&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;present&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;region&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;lon1&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;size&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;512mb&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;image&lt;/span&gt;  =&amp;gt; &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;14169855&lt;/span&gt;,
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the above manifest saved as &lt;code&gt;droplets.pp&lt;/code&gt; we can run it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puppet apply --test droplets,pp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ensure those two droplets exist in that region, and have that
size. If they don&amp;rsquo;t exist it will launch droplets using the specified image.
This means we can run the same command again, and rather that create
more instances it will simply report that we currently have those
droplets already.&lt;/p&gt;

&lt;h2 id=&#34;querying-resources&#34;&gt;Querying resources&lt;/h2&gt;

&lt;p&gt;Puppet also comes with &lt;code&gt;puppet resource&lt;/code&gt;, a handy way of querying the
state of a given resource or type. Running the following will list all
of your droplets, whether you created them using Puppet or not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ puppet resource droplet
droplet { &#39;test-digitalocean&#39;:
  ensure              =&amp;gt; &#39;present&#39;,
  backups             =&amp;gt; &#39;false&#39;,
  image               =&amp;gt; &#39;14169855&#39;,
  image_slug          =&amp;gt; &#39;ubuntu-15-10-x64&#39;,
  ipv6                =&amp;gt; &#39;true&#39;,
  price_monthly       =&amp;gt; &#39;10.0&#39;,
  private_address     =&amp;gt; &#39;10.131.98.186&#39;,
  private_networking  =&amp;gt; &#39;true&#39;,
  public_address      =&amp;gt; &#39;178.62.25.100&#39;,
  public_address_ipv6 =&amp;gt; &#39;2A03:B0C0:0001:00D0:0000:0000:0090:B001&#39;,
  region              =&amp;gt; &#39;lon1&#39;,
  size                =&amp;gt; &#39;1gb&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutating-resources&#34;&gt;Mutating resources&lt;/h2&gt;

&lt;p&gt;The type also supports mutating droplets, for instance changing the
size of a droplet if you change the model in Puppet. The API client
doesn&amp;rsquo;t support all possible changes, but you can disable backups, enable
IPv6 and switch on private networking as needed. Here&amp;rsquo;s a quick sample
of the output showing this in action.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Info: Loading facts
Notice: Compiled catalog for gareths-macbook.local in environment production in 0.43 seconds
Info: Applying configuration version &#39;1449225401&#39;
Info: Checking if droplet test-digitalocean exists
Info: Powering off droplet test-digitalocean
Info: Resizing droplet test-digitalocean
Info: Powering up droplet test-digitalocean
Notice: /Stage[main]/Main/Droplet[test-digitalocean]/size: size changed &#39;1gb&#39; to &#39;512mb&#39;
Error: Disabling IPv6 for test-digitalocean is not supported
Error: /Stage[main]/Main/Droplet[test-digitalocean]/ipv6: change from true to false failed: Disabling IPv6 for test-digitalocean is not supported
Error: Disabling private networking for test-digitalocean is not supported
Error: /Stage[main]/Main/Droplet[test-digitalocean]/private_networking: change from true to false failed: Disabling private networking for test-digitalocean is not supported
Info: Checking if droplet test-digitalocean-1 exists
Info: Created new droplet called test-digitalocean-1
Notice: /Stage[main]/Main/Droplet[test-digitalocean-1]/ensure: created
Info: Class[Main]: Unscheduling all events on Class[Main]
Notice: Applied catalog in 60.61 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;but-why&#34;&gt;But why?&lt;/h2&gt;

&lt;p&gt;Describing your infrastructure at this level in code has several advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a shared model of your infrastructure in code allows for a discussion
around that model&lt;/li&gt;
&lt;li&gt;You can be convident in the model because of the idempotent nature of running
the code&lt;/li&gt;
&lt;li&gt;The use of code for this model allows for activities like code review, change
control based on pull requests, unit testing, user created abstrations and more&lt;/li&gt;
&lt;li&gt;The use of Puppet means you can use it as above as a command line interface, or
run it every period of time to enfore and report on the state of you infrastructure&lt;/li&gt;
&lt;li&gt;Puppet ecosystem tools like PuppetDB, Puppet Board or Puppet Enterprise mean you can
store data over time for later analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The module also acts as a reasonable example of a simple Puppet type and provider.
If you&amp;rsquo;re interested in extending Puppet for your own services this is hopefully a
good place to start understanding the API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Security Implication of Unikernels</title>
      <link>/2015/09/20/security-implications-of-unikernels/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/09/20/security-implications-of-unikernels/</guid>
      <description>

&lt;p&gt;I was attending the first &lt;a href=&#34;http://gotocon.com/goto-london-2015/&#34;&gt;GOTO London conference&lt;/a&gt; last week, in particlar the &lt;a href=&#34;https://www.ruggedsoftware.org/&#34;&gt;Rugged&lt;/a&gt; Track. One of the topics of conversation that came up was unikernels, and their potential for improving the state of software security. Unikernels are pretty new outside research groups, I’m just lucky enough to live and work in Cambridge where some of that research is happening. The security advantages of unikernels are one of the things that attracted me in the first place. I thought it might be interesting to jot a few of those down for other people interested in security and the future of infrastructure.&lt;/p&gt;

&lt;p&gt;As with my &lt;a href=&#34;http://www.morethanseven.net/2015/08/21/operating-unikernel-challenges/&#34;&gt;last post&lt;/a&gt;, it’s worth having a basic understand of Unikernels. I’d recommend reading &lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2566628&#34;&gt;Unikernels - the rise of the virtual library operating system&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;hypervisor&#34;&gt;Hypervisor&lt;/h2&gt;

&lt;p&gt;Every unikernel is provided the isolation guarantees from a hypervisor. Not only are these guarantees reasonably well understood, they tend to make use of hardware features too. It’s interesting to note that recent container runtime work is heading in this direction too, with ptojects like &lt;a href=&#34;https://clearlinux.org/features/clear-containers&#34;&gt;Clear Containers from Intel&lt;/a&gt;, &lt;a href=&#34;https://blogs.vmware.com/cloudnative/introducing-project-bonneville/&#34;&gt;Bonneville from VMware&lt;/a&gt; and the &lt;a href=&#34;https://coreos.com/blog/rkt-0.8-with-new-vm-support/&#34;&gt;new stage1 in rkt&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;no-user-space&#34;&gt;No User Space&lt;/h2&gt;

&lt;p&gt;With a typical server OS we have kernel space and user space. Part of the idea here is to ensure the underlying machine doesn’t crash, whatever horrible things people do in user space. But this means &lt;em&gt;you can do horrible things&lt;/em&gt;. The unikernel model is similar to the Erlang philosophy of &lt;em&gt;let it crash&lt;/em&gt;. You only have kernel space, you entire application resides in it. Most things out of the ordinary are going to crash the kernel. This makes the sort of exploratory testing useful in exploit development harder.&lt;/p&gt;

&lt;h2 id=&#34;really-immutable-infrastructure&#34;&gt;Really Immutable Infrastructure&lt;/h2&gt;

&lt;p&gt;People often talk about immutable infrastructure. I’d wager there is more talk than reality however. When you push, people are often not using read-only file systems and retain the capability to login to machines to make ad-hoc changes. What they mean by immutable is that they only change machines at deploy time. This ignores both the fact they have the technical capability to change them anytime, and that an attacker could change them outside that deployment cycle. With unikernel systems there is often just the compiled kernel, you can’t just change files on disk. The defaults force an immutable way of working.&lt;/p&gt;

&lt;h2 id=&#34;clean-slate-tls&#34;&gt;Clean Slate TLS&lt;/h2&gt;

&lt;p&gt;As a typical developer or operator you’ve probably learned more than you wanted to know about the OpenSSL source code. It’s not well understood and not likely to be so anytime soon and has some pretty spectacular bugs like &lt;a href=&#34;http://heartbleed.com/&#34;&gt;Heartbleed&lt;/a&gt;. The &lt;a href=&#34;https://www.coreinfrastructure.org/&#34;&gt;Core Infrastructure Initiative&lt;/a&gt; is laudable and will improve things but it’s still a problematic codebase. Functional programming is often regarded as an easier way of writing understandable code. Types are a good thing, especially when it comes to security systems. So a pure &lt;a href=&#34;https://mirage.io/blog/introducing-ocaml-tls&#34;&gt;OCaml TLS&lt;/a&gt; implementation as used by &lt;a href=&#34;https://mirage.io/&#34;&gt;MirageOS&lt;/a&gt; makes sense on lots of levels. Yes this is quite an undertaking, but the &lt;a href=&#34;http://amirchaudhry.com/bitcoin-pinata/&#34;&gt;bitcoin pinata&lt;/a&gt; tests show promise.&lt;/p&gt;

&lt;h2 id=&#34;formal-proofs&#34;&gt;Formal Proofs&lt;/h2&gt;

&lt;p&gt;Knowing whether an application really does exactly what you want it to do (and no more) is a hard problem to solve. Unit tests and other form of automated testing help, but are still reliant on people to both write and design the tests. A formal proof system can provide much stronger guarentees of correctness, it’s an approach used in some cases for missing-critical components of &lt;a href=&#34;http://cacm.acm.org/magazines/2015/4/184701-how-amazon-web-services-uses-formal-methods/fulltext&#34;&gt;Amazon’s AWS&lt;/a&gt;. MirageOS is implemented in OCaml. One of the most popular OCaml programmes is &lt;a href=&#34;https://coq.inria.fr/&#34;&gt;Coq&lt;/a&gt;, which just so happens to be a formal proof management system. I’ve not seen many examples yet of this approach, probably due to the effort involved, but the capability is there for building formally specified unikernels. I’d wager a similar thing is possible with Haskell and &lt;a href=&#34;https://github.com/GaloisInc/HaLVM&#34;&gt;HalVM&lt;/a&gt;. Making that easier to do for typical developers could open up much more secure development practices for certain usecases.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Discussion of The Operational Challenges With Unikernels</title>
      <link>/2015/08/21/operating-unikernel-challenges/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/08/21/operating-unikernel-challenges/</guid>
      <description>

&lt;h2 id=&#34;what-are-unikernels&#34;&gt;What are Unikernels&lt;/h2&gt;

&lt;p&gt;Most of this post assumes a basic understanding of what unikernels are
so I’d recommend reading &lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2566628&#34;&gt;Unikernels – the rise of the virtual library
operating system&lt;/a&gt; before moving
on.&lt;/p&gt;

&lt;h2 id=&#34;why-are-unikernels-interesting&#34;&gt;Why are Unikernels interesting&lt;/h2&gt;

&lt;p&gt;As a starting point: complexity. Managing infrastructure, and the
software that runs on it, is too complicated. You can impose
organisational rules to control this complexity (we only deploy on
Debian, we only run JVM applications, the only allowed database is
MySQL) but that limits you in other ways too, and in reality is nearly
always broken somewhere in any non-trivial environment (this appliance
uses Ubuntu, this software is only certified on Windows, PostgreSQL
doesn’t run on the JVM). So you turn to software to manage that
complexity; Puppet or Chef do a great job of allowing configuration
complexity to be managed in code (where you can test it) and Docker
allows for bundles of complexity to be isolated from other bundles of
complexity. But there are still an awful lot of moving parts.&lt;/p&gt;

&lt;p&gt;Another reason is the growing realisation that security is important.
Securing systems on the internet is hard. Even though the basics are
broadly understood they are often not implemented, and the people
attempting to compromise systems are smart, well paid and highly
incentivised (basically like you). It’s generally easier to break
something than to build it. Part of this is a numbers game – to run a
reasonable sixed system you might need to run 50 different services, and
install 200 packages on every host. An attacker has to compromise just
one of those to win.&lt;/p&gt;

&lt;p&gt;A further reason, if one were needed, is the proliferation of many small
internet connected devices, aka. The Internet of Things. Part of this
relates to the above points about security concerns, but some of it is
simply a matter of managing that many single purpose, low power,
devices. The overhead of a typical general purpose operating system and
application runtime just don’t fit this model.&lt;/p&gt;

&lt;p&gt;Enter unikernels. Unikernels actually remove unneeded complexity. You’re
running a hypervisor and the unikernel and that’s it. The unikernel
contains only those libraries that you have specifically required. That
drastically reduces the surface area for attack as well as meaning
you’re running less software, hopefully enough less that your power
needs are reduced too. By specifically requiring individual libraries
you’re also making complexity visible. Rather than using a general
purpose operating system with it’s 100s of packages and millions of
lines of code you are at least choosing what to include.&lt;/p&gt;

&lt;h2 id=&#34;operational-challenges&#34;&gt;Operational challenges&lt;/h2&gt;

&lt;p&gt;While I think some part of the future looks like unikernels their are
some large operational challenges to overcome before they break out of
very specific niches or research projects. Note that&lt;/p&gt;

&lt;p&gt;there are architectural and software development challenges as well, I
just happen to think they’re easier to deal with.&lt;/p&gt;

&lt;h3 id=&#34;development-environment&#34;&gt;Development environment&lt;/h3&gt;

&lt;p&gt;There are a few properties of a development environment that I think are
essential to modern development; development/production parity being one
of the most important. Tools like Vagrant, and a move towards
infrastructure as code, and more recently Docker have made great strides
here in the past several years. The different unikernel implementations
are generally based on lesser known software stacks (Haskell, OCaml,
Erlang, etc) so some of this is familiarity. But what does
development/production partity mean for a unikernel based system? We’re
not just talking about the individual unikernel here either – how do I
deploy unikernels? How do I compose several unikernels together to build
an application? What does a Continuous integration or deployment
pipeline look like? In my view the unikernel movement should focus some
efforts here. Not only will this make it easier for people to get
started, but having strong opinions early will allow the nascent
community to solve the problem together, rather than everyone solving it
just-in-time for themselves.&lt;/p&gt;

&lt;h3 id=&#34;managing-the-hypervisor&#34;&gt;Managing the hypervisor&lt;/h3&gt;

&lt;p&gt;I’d argue today most developers don’t spent much time directly working
with hypervisors. Either you’re running on an in-house VMware, KVM or
Xen install with some (hopefully self-service, automated) provisioning
mechanism in place or you’re using a public cloud like AWS, Azure, etc.
The current generation of unikernel systems mainly target Xen. I think
in the short term at least this means getting to know the hypervisor.
Xen is solid software, but I don’t see a great deal of automation around
it – say well maintained Puppet modules, API clients or a Terraform
provider. In the long term we’ll hopefully have higher level interfaces,
but in the short term efforts here would lower the barrier to entry
considerably.&lt;/p&gt;

&lt;h4 id=&#34;double-down-on-aws&#34;&gt;Double down on AWS&lt;/h4&gt;

&lt;p&gt;Given the above, and given the ubiquity of EC2 (which is based on Xen)
it might be wise to build up first-class tools around using EC2 as a
target environment for unikernel deployments. EC2 supports custom
kernels, but these require a number of convoluted steps that could be
automated away (note that I’m talking about more than just a shell
script here). Also what are the best practices around autoscaling groups
andunikernels? Or VPC networks and unikernels?&lt;/p&gt;

&lt;h3 id=&#34;the-network&#34;&gt;The network&lt;/h3&gt;

&lt;p&gt;With the explosion in containers and microservices it’s becoming clearer
(if it wasn’t already) how important the network is. By removing the
operating system we remove things like host firewalls and the new breed
of overlay networks. At the same time if we are to tap the dynamic
potential of unikernels we’ll need a similarly dynamic and automatable
network. Maybe this becomes more of an application concern, with
services communicating via other services which act as firewalls and
intelligent proxies, but that still leaves the underlying network to be
managed.&lt;/p&gt;

&lt;h3 id=&#34;debugging&#34;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;However much testing you do beforehand you’ll still likely end up with
problems in production, and as you scale up you’ll hit issues that you
simply can’t recreate outside the live environment. This is were good
debugging capabilities come in. While general purpose operating systems
might be complex they are well know, and tools like ps, top, free, ping,
telnet, netcat, dtrace, etc. are commonly used by anyone debugging
systems. Note that in many cases you’re debugging a combination of
systems; is the performance issue an application problem, a network
problem, a storage problem or some interesting combination of several
facters?&lt;/p&gt;

&lt;p&gt;By removing the general purpose operating system, unikernel based
environments remove most of the current debugging tools at the same
time. Part of this Is good application development hygiene (logs,
metrics and status endpoints for instance), but what about the more
interactive debugging practices? What does debugging a system based on
unikernels look like?&lt;/p&gt;

&lt;h3 id=&#34;orchestration&#34;&gt;Orchestration&lt;/h3&gt;

&lt;p&gt;The word may be overloaded but the need to arrange and manage a number
of components that make up a larger system is a real need. This might be
something like Docker&amp;rsquo;s Compose file or &lt;a href=&#34;https://brooklyn.incubator.apache.org/learnmore/blueprint-tour.html&#34;&gt;Brooklyn&amp;rsquo;s
Blueprints&lt;/a&gt;,
or it could be something more akin to the APIs from Cloud Foundry,
Kubernetes or Mesos. Testing some of these models with unikernel based systems
will be an interesting test of how coupled to containers the existing models are.
The lack of legacy again opens up the potential to come up with a truly
modern alternative here too.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Unless you’re in an environment where security is your number 1 concern
then the current state of Unikernels probably means choosing to adopt
them now is a little bleeding edge. But I think that will change over
time as the various projects mature and address some of the issues
described above. In the meantime I’d love to see more discussion of some
of the operational challenges. I think talking about the needs of
operators at this early stage should make the resulting ecosystems more
robust whsen it comes to future production deployments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update to Puppet Module Skeleton</title>
      <link>/2015/08/20/puppet-module-skeleton-updates/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/08/20/puppet-module-skeleton-updates/</guid>
      <description>&lt;p&gt;Being on holiday last week meant I had a little time for some gardening
of open source projects and I decided to update
&lt;a href=&#34;https://www.github.com/garethr/puppet-module-skeleton&#34;&gt;puppet-module-skeleton&lt;/a&gt;
with some new opinions.&lt;/p&gt;

&lt;p&gt;The skeleton is a replacement for the default module skeleton that ships
with Puppet and is used by puppet module generate. Unlike the default
skeleton this one is super-opinionated. It comes bundled with lots of
testing tools, suggestions for documentation, integration with &lt;a href=&#34;http://travis-ci.org&#34;&gt;Travis
CI&lt;/a&gt;, module coverage reports and more.&lt;/p&gt;

&lt;p&gt;Updates in the latest version include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Puppet 4 paths&lt;/li&gt;
&lt;li&gt;The addition of Rubocop, which enforces parts of the Ruby style guide&lt;/li&gt;
&lt;li&gt;Adding a number of Puppet Lint plugins&lt;/li&gt;
&lt;li&gt;Allow installing various Puppet versions during integration tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also fixed a few reported bugs and extended the test matrix to test
across a range of Puppet and Ruby combinations.&lt;/p&gt;

&lt;p&gt;The skeleton is intended to help people with a basic understanding of
Puppet write better modules, without having to setup everything
themselves. You don’t have to agree with all the options to make use of
the skeleton as it’s simple enough to delete a few files once you
generate your new module. But a working out-of-the-box beaker install,
and the ability to automatically run unit tests when files change are
patterns worth adopting for most module developers I think.&lt;/p&gt;

&lt;p&gt;If anyone has any suggestions for extra tools, or changes to the
skeleton itself, let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Information Security Reading List</title>
      <link>/2015/05/19/information-security-reading-list/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/05/19/information-security-reading-list/</guid>
      <description>

&lt;p&gt;I read quite a bit (probably a book a week or so) and one of the topics
I&amp;rsquo;ve been reading on for a while is information security. In a recent
conversation someone asked for some book suggestions, so I thought I&amp;rsquo;d
write that up in a blog post rather than an email.&lt;/p&gt;

&lt;p&gt;Most of this list isn&amp;rsquo;t particularly technical. It&amp;rsquo;s not a developers
list of software engineering tomes. If you&amp;rsquo;re a developer or operator
then I&amp;rsquo;d recommend reading some of the more policy or journalistic
pieces as well for context. And if you&amp;rsquo;re just interested in the topic
but nor particularly technical I&amp;rsquo;d skip the security engineering
suggestions.&lt;/p&gt;

&lt;p&gt;Note that I make no claims about this being a particularly balanced
list, it&amp;rsquo;s biased towards what I find interesting to read. Hopefully
you&amp;rsquo;ll find it interesting too.&lt;/p&gt;

&lt;h2 id=&#34;journalism&#34;&gt;Journalism&lt;/h2&gt;

&lt;p&gt;Understanding why Information Security is important tends to require
some context. The following books provide that, with detailed real-world
stories of criminal and government activities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/The-Dark-Net-Jamie-Bartlett/dp/0434023159&#34;&gt;The Dark Net&lt;/a&gt; - Jamie Bartlett - an excellent personal tale of
investigating the hidden side of the internet.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Spam-Nation-Organized-Cybercrime-Epidemic-ebook/dp/B00L5QGBL0&#34;&gt;Spam Nation&lt;/a&gt; - Brian Krebs - everything you wanted to know about how
and why Spam works.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Countdown-Zero-Day-Stuxnet-Digital/dp/077043617X&#34;&gt;Countdown to Zero Day&lt;/a&gt; - Kim Zetter - a detailed and fast paced
description of the Stuxnet attack, and it&amp;rsquo;s implications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Future-Crimes-Everything-Connected-Vulnerable/dp/0385539002&#34;&gt;Future Crimes&lt;/a&gt; - Marc Goodman - a focus on the criminal
possibilities of the modern internet and the internet of things.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Worm-The-First-Digital-World/dp/1611855845&#34;&gt;Worm&lt;/a&gt; - Mark Bowden - similar to the excellent tale of Stuxnet
above, this is the story of Conficker and how it was discovered&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;policy-and-context&#34;&gt;Policy and context&lt;/h1&gt;

&lt;p&gt;These books are focused more on government policy and nation state
threats, and the debate about the rules of war and the internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Cyber-War-Threat-National-Security/dp/0061962244&#34;&gt;Cyber War&lt;/a&gt; - Richard Clarke - probably the best description of what
cyber war is and isn&amp;rsquo;t, and some of the geopolitical problems
emerging.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Cyber-War-Will-Take-Place/dp/1849042802&#34;&gt;Cyber War Will Not Take Place&lt;/a&gt; - Thomas Rid - a good counter to the
above book, with lots more detailed discussion of policy and definition.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Inside-Cyber-Warfare-Mapping-Underworld/dp/1449310044&#34;&gt;Inside Cyber Warfare&lt;/a&gt; - Jeffrey Carr - really just a run through of
current threats, especially organised crime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;security-engineering&#34;&gt;Security engineering&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cl.cam.ac.uk/~rja14/book.html&#34;&gt;Security Engineering&lt;/a&gt; - Ross Anderson - highly technical and quite
epic, but definitely the best security engineering book around.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Threat-Modeling-Designing-Adam-Shostack/dp/1118809998&#34;&gt;Threat Modelling&lt;/a&gt; - Adam Shostack - details descriptions of how and
why to conduct threat moddelling, with lots of examples.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Data-Driven-Security-Visualization-Dashboards/dp/1118793722&#34;&gt;Data Driven Security&lt;/a&gt; - Jay Jacobs and Bob Rudis - nice examples,
including code samples, of applying data and statistics tools and
practices to security problems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Cloud-Security-Privacy-Enterprise-Perspective/dp/0596802765&#34;&gt;Cloud Security and Privacy&lt;/a&gt; - Tim Mather, Subra Kumaraswamy, Shahed
Latif - a good book to read for anyone working in AWS, Azure or similar.
Good discussion of concerns and compliance approaches in third party
environments.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/The-Tangled-Web-Securing-Applications/dp/1593273886&#34;&gt;The Tangled Web&lt;/a&gt; - Michal Zalewski - everything you ever wanted to
know about the browser security model&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Silence-Wire-Passive-Reconnaissance-Indirect/dp/1593270461&#34;&gt;Silence on the Wire&lt;/a&gt; - Michal Zalewski - described as a field guide
to passive reconnaissance and indirect attacks. Good for starting to
think about non-obvious security threats&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;on-my-reading-list&#34;&gt;On my reading list&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve not read these books yet so can&amp;rsquo;t recommend them as such, but they
both look good additions to the list above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Data-Goliath-Bruce-Schneier/dp/0393244814&#34;&gt;Data and Goliath&lt;/a&gt; - Bruce Schneier - a look at the large scale data
collection programmes of governments and their implications for
everyone.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Black-Code-Ronald-J-Deibert/dp/0771025351&#34;&gt;Black Code&lt;/a&gt; - Ronald J. Deibert - the story of the Citizen Lab
and it&amp;rsquo;s front line cyber researchers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Acceptance testing MirageOS installs</title>
      <link>/2015/05/09/acceptance-testing-mirageos/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/05/09/acceptance-testing-mirageos/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m pretty interested in &lt;a href=&#34;http://openmirage.org/&#34;&gt;MirageOS&lt;/a&gt; at the
moment. Partly because I find the idea behind unikernels interesting and
partly because I keep bumping into the nice folks &lt;a href=&#34;http://www.cl.cam.ac.uk/projects/ocamllabs/&#34;&gt;OCaml
Labs&lt;/a&gt; in Cambridge.&lt;/p&gt;

&lt;p&gt;In order to write and build your MirageOS unikernel application you need
an OCaml development environment. Although this is
&lt;a href=&#34;http://openmirage.org/wiki/install&#34;&gt;documented&lt;/a&gt; I wanted something a
little more repeatable. I also found and reported a few bugs in the
documentation which got me thinking about acceptance testing. I&amp;rsquo;m not
(yet) an OCaml programmer, but infrastructure automation and testing I
can do.&lt;/p&gt;

&lt;h2 id=&#34;into-puppet&#34;&gt;Into Puppet&lt;/h2&gt;

&lt;p&gt;I started out writing a Puppet module to install and manage everything,
which is now available on
&lt;a href=&#34;https://github.com/garethr/garethr-mirageos&#34;&gt;GitHub&lt;/a&gt; and on the
&lt;a href=&#34;https://forge.puppetlabs.com/garethr/mirageos&#34;&gt;Forge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This lets you do something like the following, and have a fully working
MirageOS setup on Ubuntu 12.04 or 14.04.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;class&lt;/span&gt; { &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;mirageos&amp;#39;&lt;/span&gt;:
  &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;user&lt;/span&gt;      =&amp;gt; &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;opam_root&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;/home/vagrant/.opam&amp;#39;&lt;/span&gt;,
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Given time, inclination or pull requests I&amp;rsquo;ll add support for other
operating systems in the future.&lt;/p&gt;

&lt;h2 id=&#34;but-how-do-you-know-it-works&#34;&gt;But how do you know it works?&lt;/h2&gt;

&lt;p&gt;The module has a small unit test suite, but it&amp;rsquo;s nice to know test the
actual running of Puppet and installation of the software. For this I&amp;rsquo;ve
used &lt;a href=&#34;http://kitchen.ci/&#34;&gt;Test Kitchen&lt;/a&gt; and
&lt;a href=&#34;http://serverspec.org/&#34;&gt;ServerSpec&lt;/a&gt;. This allows for spinning up 2
virtual machines (one for each supported operating system), applying the
Puppet manifest and then making some assertions:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/garethr/a8d090b5d7f7a190f7d9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above is simply checking whether certain packages are installed, the
PPA is setup correctly and whether &lt;code&gt;mirage&lt;/code&gt; and &lt;code&gt;opam&lt;/code&gt; can be executed
cleanly.&lt;/p&gt;

&lt;h2 id=&#34;can-it-produce-a-working-unikernel&#34;&gt;Can it produce a working unikernel?&lt;/h2&gt;

&lt;p&gt;The above tells us whether the installation worked, but not whether the
resulting software allows us to build MirageOS unikernels. For this I
used &lt;a href=&#34;https://github.com/sstephenson/bats&#34;&gt;Bats&lt;/a&gt; running in the same
Test Kitchen setup.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/garethr/191c4c0676b471f9b986.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above configures and builds a simple HTTP server unikernel, and then
checks that when run it returns the expected response on the correct
port.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I like the separation of concerns above. I can use the Puppet code
without the test code, or even swap the Puppet code out for a shell
script if I wanted. I could also run the serverspec tests anywhere I
want to check state, which is the reason for separating those tests from
the one&amp;rsquo;s building and running a unikernel. Overall the tool chain for ad-hoc
infrastructure testing (quick mention of
&lt;a href=&#34;http://infrataster.net/&#34;&gt;Infrataster&lt;/a&gt; too) is really quite powerful and
approachable. I&amp;rsquo;d love to see more software ship with a user-facing test
suite for people to verify their installation works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating windows development environments</title>
      <link>/2015/01/02/automating-windows-development-environments/</link>
      <pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/01/02/automating-windows-development-environments/</guid>
      <description>&lt;p&gt;My job at Puppet Labs has given me an excuse to take a closer look at
the advancements in Windows automation, in particular &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;
and &lt;a href=&#34;http://boxstarter.org/&#34;&gt;BoxStarter&lt;/a&gt;. The following is very much a work
in progress but it&amp;rsquo;s hopefully useful for a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If like me you&amp;rsquo;ve mainly been doing non-Windows development for a
while it&amp;rsquo;s interesting to see what is possible&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re starting out with infrastructure development on Windows the
following could be a good starting place&lt;/li&gt;
&lt;li&gt;if you&amp;rsquo;re an experienced Windows pro then you can let me know of any
improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All that&amp;rsquo;s needed is to run the following from a CMD or Powershell
prompt on a new Windows machine (you can also visit the URL in Internet
Explorer if you prefer).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;START http://boxstarter.org/package/nr/url?https://gist.githubusercontent.com/garethr/a1838aa68355a0766de4/raw/d92b41ee9dcad68c079d24c64bac7d1d27cf37c7/garethr.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This launches BoxStarter, which executes the following code:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/garethr/a1838aa68355a0766de4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This takes a while as it runs Windows update and repeatedly reboots the
machine. But once completed you&amp;rsquo;ll have the listed software installed
and configured on a newly up-to-date Windows machine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker, Puppet and shared volumes</title>
      <link>/2014/10/28/docker-puppet-shared-volumes/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/10/28/docker-puppet-shared-volumes/</guid>
      <description>

&lt;p&gt;During one of the openspace sessions at Devopsdays we talked about docker and configuration management,
and one of the things we touched on was using dockers shared volumes support. This is easier to explain
with an example.&lt;/p&gt;

&lt;p&gt;First, lets create a docker image to run puppet. I&amp;rsquo;m also installing r10k for managing third party
modules.&lt;/p&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu:trusty

RUN apt-get update -q
RUN apt-get install -qy wget
RUN wget http://apt.puppetlabs.com/puppetlabs-release-trusty.deb
RUN dpkg -i puppetlabs-release-trusty.deb
RUN apt-get update

RUN apt-get install -y puppet ruby1.9.3 build-essential git-core
RUN echo &amp;quot;gem: --no-ri --no-rdoc&amp;quot; &amp;gt; ~/.gemrc
RUN gem install r10k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets build that and tag it locally. Feel free to use whatever name you like here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t garethr/puppet .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets now use that image as a base for another image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM garethr/puppet

RUN mkdir /etc/shared
ADD Puppetfile /
RUN r10k puppetfile check
RUN r10k puppetfile install
ADD init.pp /
CMD [&amp;quot;puppet&amp;quot;, &amp;quot;apply&amp;quot;, &amp;quot;--modulepath=/modules&amp;quot;, &amp;quot;/init.pp&amp;quot;,&amp;quot;--verbose&amp;quot;, &amp;quot;--show_diff&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This image will be used to create containers that we intend to run. Here we&amp;rsquo;re including a
Puppetfile (a list of module dependencies) and then running r10k to download those dependencies.
Finally we add a simple puppetfile (this would likely be an entire manifests directory in most cases).
The final line means that when we run a container based on this image it will run puppet and then exit.&lt;/p&gt;

&lt;p&gt;Again lets build the image and tag it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t garethr/puppetshared .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just as a demo, here&amp;rsquo;s a sample &lt;code&gt;Puppetfile&lt;/code&gt; which includes the puppetlabs stdlib module.&lt;/p&gt;

&lt;h2 id=&#34;puppet&#34;&gt;Puppet&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mod &#39;puppetlabs/stdlib&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again as an example here&amp;rsquo;s a simple puppet &lt;code&gt;init.pp&lt;/code&gt; file. All we&amp;rsquo;re doing is creating a file
at a specific location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file { &#39;/etc/shared/client&#39;:
  ensure =&amp;gt; directory,
}

file { &#39;/etc/shared/client/apache.conf&#39;:
  ensure  =&amp;gt; present,
  content =&amp;gt; &amp;quot;not a real config file&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fig&#34;&gt;Fig&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://fig.sh&#34;&gt;Fig&lt;/a&gt; is a tool to declare container types in a text file, and then run and manage
them from a simple CLI. We could do all this with straigh docker calls too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;master:
  image: garethr/puppetshared
  volumes:
    - /etc/shared:/etc/shared:rw

client:
  image: ubuntu:trusty
  volumes:
    - /etc/shared/client:/etc/:ro
  command: &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;/bin/sh&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;-c&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;while&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;true;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;echo&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;world;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;1;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;done&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important part of the above is the volumes lines. What we&amp;rsquo;re doing here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing the &lt;code&gt;/etc/shared&lt;/code&gt; directory on the host with the container called master. The container will be able to write to the host filesystem.&lt;/li&gt;
&lt;li&gt;Sharing a subdirectory of of &lt;code&gt;/etc/shared&lt;/code&gt; with the client container. The client can only read this information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note the client container here isn&amp;rsquo;t running Puppet. Here it&amp;rsquo;s just running sleep in a loop to simulate a long running process like
your custom application.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run the master. Note that this will run puppet and then exit. But with the above manifest it will create
a config file on the host.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig run master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run the client. This won&amp;rsquo;t exit and should just print &lt;code&gt;hello world&lt;/code&gt; to stdout.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig run client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker 1.3 adds the handy exec command, which allows for one-off commands to be executed within a running container.
Lets use that to see our new config file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec puppetshared_client_run_1 cat /etc/apache.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should output the contents of the file we created by running the master container.&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;This is obviously a very simple example but I think it&amp;rsquo;s interesting for a few reasons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have completely separated our code (in the container) from the configuration&lt;/li&gt;
&lt;li&gt;We get to use familiar tools for managing the configuration in a familiar way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also raises a few problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host needs to know what types of container are going to run on it, in order to have the correct configuration. If you&amp;rsquo;re using &lt;a href=&#34;https://forge.puppetlabs.com/garethr/docker&#34;&gt;Puppet module&lt;/a&gt; then this is simple enough to solve.&lt;/li&gt;
&lt;li&gt;The host ends up with all of the configuration for all the containers in one place, you could also do things with encrypting the data and having the relevant keys in one image and not others. Given how if you&amp;rsquo;re on the host you own the container anyway this isn&amp;rsquo;t as odd as it sounds.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re just demonstrating files here, but if we change our manifest and rerun the puppet container then we change the config files. But depending on the application it  won&amp;rsquo;t pick that up unless we restart it or create a new container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given enough time I may try build a reference implementation using this approach, anyone with ideas about that let me know.&lt;/p&gt;

&lt;p&gt;This post was inspired by a conversation with &lt;a href=&#34;https://twitter.com/kelseyhightower&#34;&gt;Kelsey&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/botchagalupe&#34;&gt;John&lt;/a&gt;, thanks guys.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Puppet with key/value config stores</title>
      <link>/2014/10/12/using-puppet-with-key-value-config-stores/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/10/12/using-puppet-with-key-value-config-stores/</guid>
      <description>&lt;p&gt;I like the central idea behind storing configuration in something like
&lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;Etcd&lt;/a&gt; rather than lots of files on lots
of disks, but a few challenges still remain. Things that spring to mind
are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are all your passwords now available to all of your nodes?&lt;/li&gt;
&lt;li&gt;How do I know when configuration changed and who changed it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll leave the first of those for today (although have a look at
&lt;a href=&#34;http://www.conjur.net/&#34;&gt;Conjur&lt;/a&gt; as one approach to this). For the second,
I&amp;rsquo;m quite fond of plain text, pull requests and a well tested deployment
pipeline. Before Etcd (or &lt;a href=&#34;http://www.consul.io/&#34;&gt;Consul&lt;/a&gt; or similar) you
would probably have values in Hiera or Data Bags or similar and inject them
into files on hosts using your configuration management tool of choice. So
lets just do the same with our new-fangled distributed configuration store.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;key_value_config&lt;/span&gt; { &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;:
  &lt;span style=&#34;color: #336699&#34;&gt;ensure&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;present&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;provider&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color: #336699&#34;&gt;etcd&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;value&lt;/span&gt;    =&amp;gt; &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;,
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Say you wanted to switch over to using Consul instead? Just switch the provider.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336699&#34;&gt;key_value_config&lt;/span&gt; { &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;:
  &lt;span style=&#34;color: #336699&#34;&gt;ensure&lt;/span&gt;   =&amp;gt; &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;present&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;provider&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color: #336699&#34;&gt;consul&lt;/span&gt;,
  &lt;span style=&#34;color: #336699&#34;&gt;value&lt;/span&gt;    =&amp;gt; &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;,
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;d probably move all of that out into something like hiera, and then generate
the above resources, but you get the idea.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;etcd_values:
  foo: bar
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above is implemented in a very simple
&lt;a href=&#34;https://github.com/garethr/garethr-key_value_config&#34;&gt;proof of concept Puppet module&lt;/a&gt;.
Anyone with any feedback please do let me know.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>